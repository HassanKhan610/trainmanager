# Generated by Django 5.0.1 on 2024-01-22 07:25

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TraningPlan',
            fields=[
                ('plan_id', models.IntegerField(primary_key=True, serialize=False)),
                ('model_id', models.IntegerField()),
                ('symbol', models.CharField(max_length=45)),
                ('execution_step', models.IntegerField()),
                ('description', models.TextField()),
                ('load_data', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('expiration_to_process', models.FloatField(default=1)),
                ('expiraion_day_only', models.BooleanField(default=False)),
                ('min_price_call', models.FloatField(default=1)),
                ('min_price_call_sql', models.FloatField(default=0.7)),
                ('max_price_call', models.FloatField(default=5)),
                ('max_price_call_sql', models.FloatField(default=6)),
                ('min_price_put', models.FloatField(default=0)),
                ('min_price_put_sql', models.FloatField(default=0)),
                ('max_price_put', models.FloatField(default=9999)),
                ('max_price_put_sql', models.FloatField(default=9999)),
                ('train_model', models.BooleanField(default=True)),
                ('target', models.FloatField(default=0.3)),
                ('look_forward_window', models.IntegerField(default=15)),
                ('look_backward_lstm', models.IntegerField(default=60)),
                ('test_start_date', models.DateTimeField(null=True)),
                ('test_end_date', models.DateTimeField(null=True)),
                ('probability_threshold', models.FloatField(default=0.9)),
                ('take_profit_threshold', models.FloatField(default=0.05)),
                ('architecture', models.CharField(default='Simple LSTM Model', max_length=45)),
                ('optimizer', models.CharField(default='ADAM', max_length=45)),
                ('learning_rate_var', models.FloatField(default=0.001)),
                ('epochs_var', models.IntegerField(default=10)),
                ('batch_size_var', models.IntegerField(default=32)),
                ('dropouts_var', models.FloatField(default=0.2)),
                ('lstm_units_var', models.IntegerField(default=70)),
                ('cnn_kernel', models.IntegerField(default=5)),
                ('cnn_filter', models.IntegerField(default=32)),
                ('use_weight', models.BooleanField(default=True)),
                ('use_oversampled', models.BooleanField(default=False)),
                ('max_rows', models.IntegerField(default=0)),
                ('test_by_day', models.BooleanField(default=False)),
                ('analyze_features', models.IntegerField(default=0)),
                ('run_what_if', models.BooleanField(default=False)),
                ('save_what_if', models.BooleanField(default=False)),
                ('probability_threshold_range', models.CharField(max_length=45, null=True)),
                ('take_profit_threshold_range', models.CharField(max_length=45, null=True)),
                ('result_date_time', models.DateTimeField(null=True)),
                ('result_train_rows_loaded', models.FloatField(null=True)),
                ('result_train_rows_filtered', models.FloatField(null=True)),
                ('result_train_accuracy', models.FloatField(null=True)),
                ('result_train_true_positive', models.FloatField(null=True)),
                ('result_train_false_positive', models.FloatField(null=True)),
                ('result_test_row_loaded', models.FloatField(null=True)),
                ('result_test_row_filtered', models.FloatField(null=True)),
                ('result_test_accuracy', models.FloatField(null=True)),
                ('result_test_true_positive', models.FloatField(null=True)),
                ('result_test_false_positive', models.FloatField(null=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'traning_plan',
                'managed': False,
            },
        ),
    ]
